/* NOTE: if I want to do logging, I had an idea for that:
 * HAVE THE USER PASS function pointers to a logging function that they 
 * write? as long as the function they write takes in a format string 
 * and variadic args it works? then they can kinda take it from there as 
 * far as how they want to print the messages
 * or better yet just turn logging off!
 */

^ this has been implemented 

/* NOTE: goal is to have a header only string library that can compile
 * to c89 with 0 dependencies (including C standard library)
 */

/* NOTE: list of string functions to implement:
 * x compare two strings
 *   x equals convenience function as well (i.e. are the two strings
 *   equal).
 * x concatenate strings
 * x get length of string
 * x begins with (substring or char)
 * x ends with (substring or char)
 * x index of: get index of a char or substring
 * x last index of
 * x to upper/to lower
 * x insert: insert char or substring at an index
 * x remove: remove instances of char or substring or characters at a 
 *   given index -> a few possible versions of this one, make them all
 * x replace: replace chars at a given index or replace instances of
 *   char or substring with char or substring
 * x copy: I guess copy a jstring to a char * buffer or just create
 *	 another jstring instance with the same data
 * x join: concatenates strings or list of strings with a given
 *   "separator" in between each string (i.e. a list with ", " between
 *   each string or smn could be a use case)
 * x split: like strtok but actually good basically
 * x trim: remove whitespace from beginning or end, or like all whitespace
 *   idk that could be useful too
 * - format (create a string from a given format string? this seems
 *   complicated, but is obv very useful. actually you know what, you
 *   can do it bro wtheck ofc u can) 
 * - strings to variables (int, float, etc...)
 * - add a utility function to check offset? so user can see how much
 * room they have left
 *
 * - regression tests/unit tests (technically the same)
 *
 * - use the library for a while, add functions when needed (and
 * unit tests for those functions)
 *
 * so there ya go! good luck :) - josh
 *
 */

 NOTE: random idea I had about unit/regression testing
 - write some sort of struct that can basically store "expected" results
 and have a function that plows through that struct and then says which
 results (if any) are not true, so that your tests can sort of 
 "automatically" indicate which expected conditions weren't met
 (even if it's more than one) without you having to hand roll each one.
 you simply add the condition to the "expected results" struct.
